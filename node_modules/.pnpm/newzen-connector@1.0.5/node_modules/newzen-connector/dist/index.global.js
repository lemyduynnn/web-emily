"use strict";
(() => {
  // src/index.ts
  var _NewzenConnector = class _NewzenConnector {
    constructor({ callback, initialData }) {
      this._formattedPage = null;
      this.actionHandler = () => {
        const createButton = (text, dataCmsBind) => {
          const button = document.createElement("div");
          button.textContent = text;
          button.addEventListener("click", () => {
            const messageType = `newzen:template:${text.toLowerCase()}Block`;
            window.parent.postMessage({ type: messageType, data: dataCmsBind }, "*");
          });
          return button;
        };
        const createBlockNavigator = (section) => {
          const div = document.createElement("div");
          if (this._formattedPage) {
            div.classList.add("block-navigator");
            const buttons = ["Edit", "Up", "Down", "Delete"];
            buttons.forEach((buttonText) => {
              const button = createButton(buttonText, section.dataset.cmsBind);
              div.appendChild(button);
            });
          }
          return div;
        };
        const handleMouseEvents = (event, isMouseOver) => {
          const section = event.target.closest('[data-cms-bind^="#content_blocks"]');
          if (!section) {
            return;
          }
          section.classList.toggle("content-block--hover", isMouseOver);
          if (window.location !== window.parent.location) {
            section.classList.remove("hidden-block-navigator");
          } else {
            section.classList.add("hidden-block-navigator");
          }
          const nav = section.querySelector(".block-navigator");
          if (nav == null ? void 0 : nav.contains(event.relatedTarget)) {
            return;
          }
          if (isMouseOver && !nav) {
            section.appendChild(createBlockNavigator(section));
            return;
          }
          if (!isMouseOver && nav) {
            section.removeChild(nav);
          }
        };
        document.body.addEventListener("mouseover", (event) => handleMouseEvents(event, true));
        document.body.addEventListener("mouseout", (event) => handleMouseEvents(event, false));
        window.addEventListener("message", (event) => {
          const { type, data } = event.data;
          switch (type) {
            case "newzen:scrollToSection" /* TEMPLATE_SCROLL_TO_SECTION */: {
              const div = document.querySelector(`[data-cms-bind="#content_blocks.${data - 1}"]`);
              if (!div) {
                return;
              }
              const divOffset = div.offsetTop;
              const offset = document.querySelector('header[class*="sticky"]').offsetHeight || 0;
              window.scrollTo({ top: divOffset - offset, behavior: "smooth" });
              break;
            }
            case "newzen:update" /* UPDATE */: {
              this._formattedPage = _NewzenConnector.formatContentBlock(JSON.parse(data));
              this.callback(this._formattedPage);
              break;
            }
          }
        });
      };
      this.callback = callback;
      this._formattedPage = initialData != null ? initialData : null;
    }
  };
  _NewzenConnector.formatContentBlock = (pageObject) => {
    pageObject.content_blocks.forEach(function(item) {
      item._block_name = item._block_name.replaceAll(/[^a-zA-Z0-9 ]/g, " ").replaceAll(/(^\w)|(\s+\w)/g, (c) => c.toUpperCase()).replaceAll(" ", "");
    });
    return pageObject;
  };
  var NewzenConnector = _NewzenConnector;
})();
//# sourceMappingURL=index.global.js.map