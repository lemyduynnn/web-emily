{"version":3,"file":"../require-bundle.min.js","sources":["require-bundle.js"],"sourcesContent":["loadjs = (function () {\n/**\n * Global dependencies.\n * @global {Object} document - DOM\n */\n\nvar devnull = function() {},\n    bundleIdCache = {},\n    bundleResultCache = {},\n    bundleCallbackQueue = {};\n\n\n/**\n * Subscribe to bundle load event.\n * @param {string[]} bundleIds - Bundle ids\n * @param {Function} callbackFn - The callback function\n */\nfunction subscribe(bundleIds, callbackFn) {\n  // listify\n  bundleIds = bundleIds.push ? bundleIds : [bundleIds];\n\n  var depsNotFound = [],\n      i = bundleIds.length,\n      numWaiting = i,\n      fn,\n      bundleId,\n      r,\n      q;\n\n  // define callback function\n  fn = function (bundleId, pathsNotFound) {\n    if (pathsNotFound.length) depsNotFound.push(bundleId);\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(depsNotFound);\n  };\n\n  // register callback\n  while (i--) {\n    bundleId = bundleIds[i];\n\n    // execute callback if in result cache\n    r = bundleResultCache[bundleId];\n    if (r) {\n      fn(bundleId, r);\n      continue;\n    }\n\n    // add to callback queue\n    q = bundleCallbackQueue[bundleId] = bundleCallbackQueue[bundleId] || [];\n    q.push(fn);\n  }\n}\n\n\n/**\n * Publish bundle load event.\n * @param {string} bundleId - Bundle id\n * @param {string[]} pathsNotFound - List of files not found\n */\nfunction publish(bundleId, pathsNotFound) {\n  // exit if id isn't defined\n  if (!bundleId) return;\n\n  var q = bundleCallbackQueue[bundleId];\n\n  // cache result\n  bundleResultCache[bundleId] = pathsNotFound;\n\n  // exit if queue is empty\n  if (!q) return;\n\n  // empty callback queue\n  while (q.length) {\n    q[0](bundleId, pathsNotFound);\n    q.splice(0, 1);\n  }\n}\n\n\n/**\n * Execute callbacks.\n * @param {Object or Function} args - The callback args\n * @param {string[]} depsNotFound - List of dependencies not found\n */\nfunction executeCallbacks(args, depsNotFound) {\n  // accept function as argument\n  if (args.call) args = {success: args};\n\n  // success and error callbacks\n  if (depsNotFound.length) (args.error || devnull)(depsNotFound);\n  else (args.success || devnull)(args);\n}\n\n\n/**\n * Load individual file.\n * @param {string} path - The file path\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFile(path, callbackFn, args, numTries) {\n  var doc = document,\n      async = args.async,\n      maxTries = (args.numRetries || 0) + 1,\n      beforeCallbackFn = args.before || devnull,\n      pathname = path.replace(/[\\?|#].*$/, ''),\n      pathStripped = path.replace(/^(css|img)!/, ''),\n      isLegacyIECss,\n      e;\n\n  numTries = numTries || 0;\n\n  if (/(^css!|\\.css$)/.test(pathname)) {\n    // css\n    e = doc.createElement('link');\n    e.rel = 'stylesheet';\n    e.href = pathStripped;\n\n    // tag IE9+\n    isLegacyIECss = 'hideFocus' in e;\n\n    // use preload in IE Edge (to detect load errors)\n    if (isLegacyIECss && e.relList) {\n      isLegacyIECss = 0;\n      e.rel = 'preload';\n      e.as = 'style';\n    }\n  } else if (/(^img!|\\.(png|gif|jpg|svg|webp)$)/.test(pathname)) {\n    // image\n    e = doc.createElement('img');\n    e.src = pathStripped;    \n  } else {\n    // javascript\n    e = doc.createElement('script');\n    e.src = path;\n    e.async = async === undefined ? true : async;\n  }\n\n  e.onload = e.onerror = e.onbeforeload = function (ev) {\n    var result = ev.type[0];\n\n    // treat empty stylesheets as failures to get around lack of onerror\n    // support in IE9-11\n    if (isLegacyIECss) {\n      try {\n        if (!e.sheet.cssText.length) result = 'e';\n      } catch (x) {\n        // sheets objects created from load errors don't allow access to\n        // `cssText` (unless error is Code:18 SecurityError)\n        if (x.code != 18) result = 'e';\n      }\n    }\n\n    // handle retries in case of load failure\n    if (result == 'e') {\n      // increment counter\n      numTries += 1;\n\n      // exit function and try again\n      if (numTries < maxTries) {\n        return loadFile(path, callbackFn, args, numTries);\n      }\n    } else if (e.rel == 'preload' && e.as == 'style') {\n      // activate preloaded stylesheets\n      return e.rel = 'stylesheet'; // jshint ignore:line\n    }\n    \n    // execute callback\n    callbackFn(path, result, ev.defaultPrevented);\n  };\n\n  // add to document (unless callback returns `false`)\n  if (beforeCallbackFn(path, e) !== false) doc.head.appendChild(e);\n}\n\n\n/**\n * Load multiple files.\n * @param {string[]} paths - The file paths\n * @param {Function} callbackFn - The callback function\n */\nfunction loadFiles(paths, callbackFn, args) {\n  // listify paths\n  paths = paths.push ? paths : [paths];\n\n  var numWaiting = paths.length,\n      x = numWaiting,\n      pathsNotFound = [],\n      fn,\n      i;\n\n  // define callback function\n  fn = function(path, result, defaultPrevented) {\n    // handle error\n    if (result == 'e') pathsNotFound.push(path);\n\n    // handle beforeload event. If defaultPrevented then that means the load\n    // will be blocked (ex. Ghostery/ABP on Safari)\n    if (result == 'b') {\n      if (defaultPrevented) pathsNotFound.push(path);\n      else return;\n    }\n\n    numWaiting--;\n    if (!numWaiting) callbackFn(pathsNotFound);\n  };\n\n  // load scripts\n  for (i=0; i < x; i++) loadFile(paths[i], fn, args);\n}\n\n\n/**\n * Initiate script load and register bundle.\n * @param {(string|string[])} paths - The file paths\n * @param {(string|Function|Object)} [arg1] - The (1) bundleId or (2) success\n *   callback or (3) object literal with success/error arguments, numRetries,\n *   etc.\n * @param {(Function|Object)} [arg2] - The (1) success callback or (2) object\n *   literal with success/error arguments, numRetries, etc.\n */\nfunction loadjs(paths, arg1, arg2) {\n  var bundleId,\n      args;\n\n  // bundleId (if string)\n  if (arg1 && arg1.trim) bundleId = arg1;\n\n  // args (default is {})\n  args = (bundleId ? arg2 : arg1) || {};\n\n  // throw error if bundle is already defined\n  if (bundleId) {\n    if (bundleId in bundleIdCache) {\n      throw \"LoadJS\";\n    } else {\n      bundleIdCache[bundleId] = true;\n    }\n  }\n\n  function loadFn(resolve, reject) {\n    loadFiles(paths, function (pathsNotFound) {\n      // execute callbacks\n      executeCallbacks(args, pathsNotFound);\n      \n      // resolve Promise\n      if (resolve) {\n        executeCallbacks({success: resolve, error: reject}, pathsNotFound);\n      }\n\n      // publish bundle load event\n      publish(bundleId, pathsNotFound);\n    }, args);\n  }\n  \n  if (args.returnPromise) return new Promise(loadFn);\n  else loadFn();\n}\n\n\n/**\n * Execute callbacks when dependencies have been satisfied.\n * @param {(string|string[])} deps - List of bundle ids\n * @param {Object} args - success/error arguments\n */\nloadjs.ready = function ready(deps, args) {\n  // subscribe to bundle load event\n  subscribe(deps, function (depsNotFound) {\n    // execute callbacks\n    executeCallbacks(args, depsNotFound);\n  });\n\n  return loadjs;\n};\n\n\n/**\n * Manually satisfy bundle dependencies.\n * @param {string} bundleId - The bundle id\n */\nloadjs.done = function done(bundleId) {\n  publish(bundleId, []);\n};\n\n\n/**\n * Reset loadjs dependencies statuses\n */\nloadjs.reset = function reset() {\n  bundleIdCache = {};\n  bundleResultCache = {};\n  bundleCallbackQueue = {};\n};\n\n\n/**\n * Determine if bundle has already been defined\n * @param String} bundleId - The bundle id\n */\nloadjs.isDefined = function isDefined(bundleId) {\n  return bundleId in bundleIdCache;\n};\n\n\n// export\nreturn loadjs;\n\n})();\n\n/**\n * Resource dependency manager to asyncronously load JS, CSS or Images as a bundle.\n */\n(function (root, factory) {\n\tif ( typeof define === 'function' && define.amd ) {\n\t  define([], factory(root));\n\t} else if ( typeof exports === 'object' ) {\n\t  module.exports = factory(root);\n\t} else {\n\t  root.RequireBundle = factory(root);\n\t}\n  })(typeof global !== 'undefined' ? global : this.window || this.global, function (root) {\n\n\t'use strict';\n\n\n\tvar _publicMethods = {};\n\tvar _bundles = {};\n\n\n\n\t/******************\n\t * PRIVATE METHODS\n\t *****************/\n\n\n\n\t/**\n\t * Maybe autoload bundles\n\t */\n\tvar maybeAutoload = function() {\n\t\t_publicMethods.getIds().forEach( function( bundleId ) {\n\t\t\tvar bundle = _bundles[ bundleId ];\n\t\t\tif ( typeof bundle.autoLoadSelector === 'string' && document.querySelector( bundle.autoLoadSelector ) ) {\n\t\t\t\t_publicMethods.require( bundleId, bundle.callbackFn );\n\t\t\t}\n\t\t} );\n\t}\n\n\n\n\t/******************\n\t * PUBLIC METHODS\n\t *****************/\n\n\n\n\t/**\n\t * Get list of registered bundles\n\t *\n\t * @return  {Array}  List of registered bundle ids\n\t */\n\t_publicMethods.getIds = function() {\n\t\treturn Object.keys( _bundles );\n\t};\n\n\n\n\t/**\n\t * Check if a bundle has been registered\n\t *\n\t * @param   {String}  bundleId  Bundle Id\n\t *\n\t * @return  {Boolean}           True if a bundle has been registered with the id passed\n\t */\n\t_publicMethods.hasBundle = function( bundleId ) {\n\t\treturn _bundles.hasOwnProperty( bundleId );\n\t};\n\n\n\n\t/**\n\t * Get the bundle dependencies values\n\t * \n\t * @param   {String}  bundleId  Bundle Id\n\t *\n\t * @return  {Array/Boolean}  Bundle dependencies values or false if not registered\n\t */\n\t_publicMethods.getBundle = function( bundleId ) {\n\t\tif ( ! _publicMethods.hasBundle( bundleId ) ) return [];\n\t\treturn _bundles[ bundleId ];\n\t};\n\n\n\n\t/**\n\t * Register new bundle of resources\n\t *\n\t * @param   {String}  bundleId  Bundle ID\n\t * @param   {Array}   deps      Array of resource paths\n\t */\n\t_publicMethods.register = function( bundleId, deps, autoLoadSelector, callbackFn ) {\n\t\t// Already registered\n\t\tif ( _publicMethods.hasBundle( bundleId ) ) { \n\t\t\tconsole.log( 'Bundle already registered: `' + bundleId + '`' );\n\t\t\treturn false;\n\t\t};\n\n\t\t// Register\n\t\t_bundles[ bundleId ] = {\n\t\t\tbundleId: bundleId,\n\t\t\tdeps: deps,\n\t\t\tautoLoadSelector: autoLoadSelector,\n\t\t\tcallbackFn: callbackFn,\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\n\t/**\n\t * Load bundle of dependencies using LoadJS\n\t *\n\t * @param   {Array}     bundleIds   Array of Bundle IDs to load\n\t * @param   {Function}  callbackFn  Function executed after bundle is successfully loaded\n\t */\n\t_publicMethods.require = function( bundleIds, callbackFn ) {\n\t\t// Make sure variables are in the expected format\n\t\tif ( ! Array.isArray( bundleIds ) ) bundleIds = [ bundleIds ];\n\t\tif ( typeof callbackFn !== 'function' ) {\n\t\t\tcallbackFn = function(){};\n\t\t}\n\t\t\n\t\t// Load each bundle\n\t\tbundleIds.forEach( function( bundleId ) {\n\t\t\tvar bundle = _publicMethods.getBundle( bundleId );\n\t\t\tif ( bundle ) {\n\t\t\t\tif ( ! loadjs.isDefined( bundleId ) ) loadjs( bundle.deps, bundleId );\n\t\t\t}\n\t\t});\n\t\t\n\t\t// Run callback when ready\n\t\tloadjs.ready( bundleIds, callbackFn );\n\t};\n\n\n\n\t/**\n\t * Add load event listener to auto-load bundles\n\t */\n\twindow.addEventListener( 'load', maybeAutoload );\n\n\n\t//\n\t// Expose Public APIs\n\t//\n\treturn _publicMethods;\n\n});\n"],"names":["loadjs","devnull","bundleIdCache","bundleResultCache","bundleCallbackQueue","publish","bundleId","pathsNotFound","q","length","splice","executeCallbacks","args","depsNotFound","call","success","error","loadFiles","paths","callbackFn","numWaiting","push","x","fn","path","result","defaultPrevented","i","loadFile","numTries","isLegacyIECss","e","doc","document","async","maxTries","numRetries","beforeCallbackFn","before","pathname","replace","pathStripped","test","createElement","rel","href","relList","as","src","undefined","onload","onerror","onbeforeload","ev","type","sheet","cssText","code","head","appendChild","arg1","arg2","trim","loadFn","resolve","reject","returnPromise","Promise","ready","deps","bundleIds","r","subscribe","done","reset","isDefined","root","factory","define","amd","exports","module","RequireBundle","global","this","window","_publicMethods","_bundles","getIds","Object","keys","hasBundle","hasOwnProperty","getBundle","register","autoLoadSelector","console","log","require","Array","isArray","forEach","bundle","addEventListener","querySelector"],"mappings":"AAAAA,OAAS,WAMT,IAAIC,EAAU,aACVC,EAAgB,GAChBC,EAAoB,GACpBC,EAAsB,GAmD1B,SAASC,EAAQC,EAAUC,GAEzB,GAAKD,EAAL,CAEA,IAAIE,EAAIJ,EAAoBE,GAM5B,GAHAH,EAAkBG,GAAYC,EAGzBC,EAGL,KAAOA,EAAEC,QACPD,EAAE,GAAGF,EAAUC,GACfC,EAAEE,OAAO,EAAG,IAUhB,SAASC,EAAiBC,EAAMC,GAE1BD,EAAKE,OAAMF,EAAO,CAACG,QAASH,IAG5BC,EAAaJ,QAASG,EAAKI,OAASf,GAASY,IAC3CD,EAAKG,SAAWd,GAASW,GA0FjC,SAASK,EAAUC,EAAOC,EAAYP,GA2BpC,IAvBA,IAAIQ,GAFJF,EAAQA,EAAMG,KAAOH,EAAQ,CAACA,IAEPT,OACnBa,EAAIF,EACJb,EAAgB,GAKpBgB,EAAK,SAASC,EAAMC,EAAQC,GAM1B,GAJc,KAAVD,GAAelB,EAAcc,KAAKG,GAIxB,KAAVC,EAAe,CACjB,IAAIC,EACC,OADiBnB,EAAcc,KAAKG,KAI3CJ,GACiBD,EAAWZ,IAIzBoB,EAAE,EAAGA,EAAIL,EAAGK,KA5GnB,SAASC,EAASJ,EAAML,EAAYP,EAAMiB,GACxC,IAMIC,EACAC,EAPAC,EAAMC,SACNC,EAAQtB,EAAKsB,MACbC,GAAYvB,EAAKwB,YAAc,GAAK,EACpCC,EAAmBzB,EAAK0B,QAAUrC,EAClCsC,EAAWf,EAAKgB,QAAQ,YAAa,IACrCC,EAAejB,EAAKgB,QAAQ,cAAe,IAI/CX,EAAWA,GAAY,EAEnB,iBAAiBa,KAAKH,KAExBR,EAAIC,EAAIW,cAAc,SACpBC,IAAM,aACRb,EAAEc,KAAOJ,GAGTX,EAAgB,cAAeC,IAGVA,EAAEe,UACrBhB,EAAgB,EAChBC,EAAEa,IAAM,UACRb,EAAEgB,GAAK,UAEA,oCAAoCL,KAAKH,IAElDR,EAAIC,EAAIW,cAAc,QACpBK,IAAMP,IAGRV,EAAIC,EAAIW,cAAc,WACpBK,IAAMxB,EACRO,EAAEG,WAAkBe,IAAVf,GAA6BA,GAGzCH,EAAEmB,OAASnB,EAAEoB,QAAUpB,EAAEqB,aAAe,SAAUC,GAChD,IAAI5B,EAAS4B,EAAGC,KAAK,GAIrB,GAAIxB,EACF,IACOC,EAAEwB,MAAMC,QAAQ/C,SAAQgB,EAAS,KACtC,MAAOH,GAGO,IAAVA,EAAEmC,OAAYhC,EAAS,KAK/B,GAAc,KAAVA,GAKF,IAHAI,GAAY,GAGGM,EACb,OAAOP,EAASJ,EAAML,EAAYP,EAAMiB,QAErC,GAAa,WAATE,EAAEa,KAA4B,SAARb,EAAEgB,GAEjC,OAAOhB,EAAEa,IAAM,aAIjBzB,EAAWK,EAAMC,EAAQ4B,EAAG3B,oBAII,IAA9BW,EAAiBb,EAAMO,IAAcC,EAAI0B,KAAKC,YAAY5B,GAoCxCH,CAASV,EAAMS,GAAIJ,EAAIX,GAa/C,SAASZ,EAAOkB,EAAO0C,EAAMC,GAC3B,IAAIvD,EACAM,EASJ,GANIgD,GAAQA,EAAKE,OAAMxD,EAAWsD,GAGlChD,GAAQN,EAAWuD,EAAOD,IAAS,GAG/BtD,EAAU,CACZ,GAAIA,KAAYJ,EACd,KAAM,SAENA,EAAcI,IAAY,EAI9B,SAASyD,EAAOC,EAASC,GACvBhD,EAAUC,EAAO,SAAUX,GAEzBI,EAAiBC,EAAML,GAGnByD,GACFrD,EAAiB,CAACI,QAASiD,EAAShD,MAAOiD,GAAS1D,GAItDF,EAAQC,EAAUC,IACjBK,GAGL,GAAIA,EAAKsD,cAAe,OAAO,IAAIC,QAAQJ,GACtCA,IAiDP,OAxCA/D,EAAOoE,MAAQ,SAAeC,EAAMzD,GAOlC,OA/PF,SAAmB0D,EAAWnD,GAE5BmD,EAAYA,EAAUjD,KAAOiD,EAAY,CAACA,GAmB1C,IAjBA,IAIIhE,EACAiE,EALA1D,EAAe,GACfc,EAAI2C,EAAU7D,OACdW,EAAaO,EAOjBJ,EAAK,SAAUjB,EAAUC,GACnBA,EAAcE,QAAQI,EAAaQ,KAAKf,KAE5Cc,GACiBD,EAAWN,IAIvBc,KACLrB,EAAWgE,EAAU3C,IAGrB4C,EAAIpE,EAAkBG,IAEpBiB,EAAGjB,EAAUiE,IAKXnE,EAAoBE,GAAYF,EAAoBE,IAAa,IACnEe,KAAKE,GAyNTiD,CAAUH,EAAM,SAAUxD,GAExBF,EAAiBC,EAAMC,KAGlBb,GAQTA,EAAOyE,KAAO,SAAcnE,GAC1BD,EAAQC,EAAU,KAOpBN,EAAO0E,MAAQ,WACbxE,EAAgB,GAChBC,EAAoB,GACpBC,EAAsB,IAQxBJ,EAAO2E,UAAY,SAAmBrE,GACpC,OAAOA,KAAYJ,GAKdF,EAjTE,GAwTT,SAAW4E,EAAMC,GACO,mBAAXC,QAAyBA,OAAOC,IAC1CD,OAAO,GAAID,KACkB,iBAAZG,QACjBC,OAAOD,QAAUH,IAEjBD,EAAKM,cAAgBL,IANxB,CAQuB,oBAAXM,OAAyBA,OAASC,KAAKC,QAAUD,KAAKD,OAAQ,SAAUP,gBAKnF,IAAIU,EAAiB,GACjBC,EAAW,GAkIf,OA/FAD,EAAeE,OAAS,WACvB,OAAOC,OAAOC,KAAMH,IAYrBD,EAAeK,UAAY,SAAUrF,GACpC,OAAOiF,EAASK,eAAgBtF,IAYjCgF,EAAeO,UAAY,SAAUvF,GACpC,OAAOgF,EAAeK,UAAWrF,GAC1BiF,EAAUjF,GADoC,IAYtDgF,EAAeQ,SAAW,SAAUxF,EAAU+D,EAAM0B,EAAkB5E,GAErE,OAAKmE,EAAeK,UAAWrF,IAC9B0F,QAAQC,IAAK,+BAAiC3F,EAAW,MAClD,IAIRiF,EAAUjF,GAAa,CACtBA,SAAUA,EACV+D,KAAMA,EACN0B,iBAAkBA,EAClB5E,WAAYA,IAGN,IAWRmE,EAAeY,QAAU,SAAU5B,EAAWnD,GAEtCgF,MAAMC,QAAS9B,KAAcA,EAAY,CAAEA,IACvB,mBAAfnD,IACXA,EAAa,cAIdmD,EAAU+B,QAAS,SAAU/F,GAC5B,IAAIgG,EAAShB,EAAeO,UAAWvF,GAClCgG,IACGtG,OAAO2E,UAAWrE,IAAaN,OAAQsG,EAAOjC,KAAM/D,MAK7DN,OAAOoE,MAAOE,EAAWnD,IAQ1BkE,OAAOkB,iBAAkB,OA/GL,WACnBjB,EAAeE,SAASa,QAAS,SAAU/F,GAC1C,IAAIgG,EAASf,EAAUjF,GACiB,iBAA5BgG,EAAOP,kBAAiC9D,SAASuE,cAAeF,EAAOP,mBAClFT,EAAeY,QAAS5F,EAAUgG,EAAOnF,gBAiHrCmE"}